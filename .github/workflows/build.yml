name: "Build kernels for release"

env:
  OUT_DIR: "${{ github.workspace }}/out"

on:
  workflow_call:
    inputs:
      from_ci:
        type: boolean
        required: false
        default: true

  workflow_dispatch:

jobs:
  Set-repos:
    name: "🐂 Parse repos.json"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
      builddate: ${{ steps.generate-builddate.outputs.builddate }}
    steps:
      - name: "😄 Checkout"
        uses: actions/checkout@v3

      - name: "😆 Generate Matrix"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          jq -s '[.[][]]' repos/repos*.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: "⏰ Set builddate"
        id: generate-builddate
        run: echo "builddate=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "🐎 Build kernel"
    runs-on: ubuntu-latest
    needs:
      - Set-repos
    strategy:
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      WORKSPACE: ${{ github.workspace }}
      builddate: "${{ needs.Set-repos.outputs.builddate }}"

      KNAME: ${{ matrix.repos.kernelName }}
      KERNEL_DEVICE: ${{ matrix.repos.kernelSource.device }}
      DEFCONFIG_NAME: ${{ matrix.repos.kernelSource.defconfig }}

      withRoot: ${{ matrix.repos.withRoot }}
      withSUSFS: ${{ matrix.repos.withSUSFS }}
      ccache: ${{ matrix.repos.ccache }}
      useAnykernel: ${{ matrix.repos.AnyKernel3.use }}
      release: ${{ matrix.repos.AnyKernel3.release }}

    steps:
      - name: "🟣 Set Kernel Variables"
        run: |
          echo "KERNEL_NAME=${{ matrix.repos.kernelSource.name }}" >> $GITHUB_ENV
          echo "KERNEL_REPO=${{ matrix.repos.kernelSource.repo }}" >> $GITHUB_ENV
          echo "KERNEL_BRANCH=${{ matrix.repos.kernelSource.branch }}" >> $GITHUB_ENV

          echo "toolchains=$(echo '${{ toJSON(matrix.repos.toolchains) }}' | jq -c)" >> $GITHUB_ENV
          echo "params=$(echo '${{ toJSON(matrix.repos.params) }}' | jq -c)" >> $GITHUB_ENV
          echo "THREAD=$(nproc --all)" >> $GITHUB_ENV

      - name: "⭐ Install prerequisites"
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev libfl-dev
          sudo apt-get install -y curl git ftp lftp wget libarchive-tools ccache
          sudo apt-get install -y zip unzip tar gzip bzip2 rar unrar
          sudo apt-get install -y checkinstall libncursesw5-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev
          wget https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tgz
          tar -xvf Python-2.7.18.tgz
          cd Python-2.7.18
          ./configure
          make -j$(nproc)
          sudo make install
          curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py
          sudo python2.7 get-pip.py
          sudo update-alternatives --install /usr/bin/python python /usr/local/lib/python2.7 1
          sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 2 || true
          cd ..

      - name: "⭐ Install Clang"
        run: |
          sudo apt-get install -y clang llvm

      - name: "⭐ Set Clang as default compiler"
        run: |
          export CC=clang
          export CXX=clang++

          # Debug the toolchains variable and parse with jq
          REPO_URL=$(echo "$toolchains" | jq -r '.[0].repo')
          echo "Toolchain repository: $REPO_URL"
    
          # Ensure the kernel source directory exists before attempting to `cd` into it
          if [ -d "$WORKSPACE/$KERNEL_NAME" ]; then
            cd $WORKSPACE/$KERNEL_NAME  # Ensure you're in the correct directory
            ls -l  # List the files in the current directory to check for Makefile presence
          else
            echo "Error: Kernel source directory does not exist: $WORKSPACE/$KERNEL_NAME"
            git clone --recursive --depth=1 --branch $KERNEL_BRANCH $KERNEL_REPO $KERNEL_NAME  # Clone the kernel repo if it doesn't exist
            cd $WORKSPACE/$KERNEL_NAME  # Retry cd after cloning
            echo "Kernel repository cloned successfully."
          fi

          # Run make defconfig to generate .config
          make defconfig

          # Now, run make to build the kernel
          make -j$(nproc)  # Execute make in the kernel source directory

      - name: "⏰ Setup Anykernel3"
        env:
          params: "${{ toJSON(matrix.repos.AnyKernel3) }}"
        run: |
          ANYKERNEL_REPO=$(echo $params | jq -r ".repo")
          ANYKERNEL_BRANCH=$(echo $params | jq -r ".branch")
          git clone --recursive --depth=1 -j $(nproc) --branch $ANYKERNEL_BRANCH $ANYKERNEL_REPO AnyKernel3
          echo "🤔 Setup Anykernel3 => ($ANYKERNEL_REPO)"

      - name: "🌟 Clone kernel source => (${{ env.KERNEL_REPO }})"
        run: |
          git clone --recursive --depth=1 -j $(nproc) --branch $KERNEL_BRANCH $KERNEL_REPO $KERNEL_NAME
          echo -e "\n⚠️ Kernel is at commit: $(git -C $KERNEL_NAME rev-parse HEAD)\n"
          echo "🤔 Clone kernel source => ($KERNEL_REPO)"

      - name: "💫 Get toolchains"
        run: |
          toolchains_num="$(echo $toolchains | jq 'length')"
          echo "🤔 There is $toolchains_num defined toolchains."
          for ((i=0;i<toolchains_num;i++)); do
            toolchain_name=$(echo $toolchains | jq -r ".[$i].name")
            toolchain_repo=$(echo $toolchains | jq -r ".[$i].repo")
            toolchain_branch=$(echo $toolchains | jq -r ".[$i].branch")
            toolchain_url=$(echo $toolchains | jq -r ".[$i].url")

            echo $toolchain_url
            if [ -z "${toolchain_url:-}" ] || [ "$toolchain_url" = "null" ];  then
              git clone --recursive --depth=1 -j $(nproc) --branch $toolchain_branch $toolchain_repo $toolchain_name
              echo "🤔 Clone $toolchain_name => ($toolchain_repo)"
            else
              wget "$toolchain_url"
              filename="${toolchain_url##*/}"
              mkdir -p $toolchain_name
              case "$filename" in
                *.zip)
                  unzip -d $toolchain_name "$filename"
                  ;;
                *.tar)
                  tar xvf "$filename" -C $toolchain_name
                  ;;
                *.tar.gz)
                  tar zxvf "$filename" -C $toolchain_name
                  ;;
                *.rar)
                  unrar x "$filename" $toolchain_name
                  ;;
                *)
                  echo "unknown file type: $filename"
                  ;;
              esac
            fi

            jq -r ".[$i].binPath[] | tostring" <<< "$toolchains" | while read -r bin_path; do
              echo "$WORKSPACE/$toolchain_name/$bin_path" >> $GITHUB_PATH
            done
          done
